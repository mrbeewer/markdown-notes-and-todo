@{
    ViewBag.Title = "About";
}

<h1>Markdown Manager</h1>
<p>
    Markdown Manager is a web based markdown editor with a focus on management through notes and todos.<br />
    <em>Markdown Conversion Powered By <a href="https://github.com/jonschlinkert/remarkable">Jon Schlinkert - Remarkable</a></em><br />
    <em>Syntax Highlighting Powered By <a href="https://highlightjs.org/">Highlight.js</a></em>
</p>
<p>
    <a href="http://markdownmanager.azurewebsites.net/">Live Demo</a><br />
    Test with --&gt; username: <em><a href="mailto:fake@fake.com">fake@fake.com</a></em>, password: <em>P_assw0rd1</em>
</p>
<p align="center">
    <img width="400px" src="/Images/Logo.png" alt="MarkdownManager Logo" />
<p>

<h3>Technology:</h3>
<ul>
    <li>HTML, CSS, JavaScript, jQuery</li>
    <li>ASP.NET (C#) + Razor - MVC and RESTful API</li>
    <li>OAuth - User Authorization</li>
    <li>Microsoft SQL - Database Management</li>
    <li>Bootstrap - CSS Framework</li>
    <li>GIMP - Logo</li>
    <li><a href="http://www.bootstraptoggle.com/">Bootstrap Toggle</a></li>
    <li><a href="https://github.com/mdo/github-buttons">GitHub Buttons by MDO</a></li>
    <li><a href="http://draw.io">Draw.io</a> - Wireframes and ERD</li>
    <li><a href="https://trello.com">Trello</a> - SCRUM Board</li>
</ul>
<h3>Links:</h3>
<ul>
    <li>
        Use Case Diagram, Activity Diagram, User Stories, Wireframes, ERD
        <ul>
            <li><a href="https://github.com/mrbeewer/markdown-notes-and-todo/blob/master/misc-files/UML-Markdown+Todo.png">Image</a></li>
            <li><a href="https://github.com/mrbeewer/markdown-notes-and-todo/blob/master/misc-files/UML-Markdown+Todo.pdf">PDF</a></li>
            <li><a href="https://drive.google.com/file/d/0B1PeprrWaiPLcEZVa0NiUTBEa1E/view?usp=sharing">Draw.io</a></li>
        </ul>
    </li>
    <li><a href="https://trello.com/b/rvAVYeyS">SCRUM Board</a></li>
    <li>Live App - <a href="http://markdownmanager.azurewebsites.net/">Markdown Manager</a></li>
</ul>
<h3>Approach:</h3>
<ul>
    <li>
        Planning Phase
        <ul>
            <li>With more time available on this project, more time was spent on the planning phase.</li>
            <li>Used Trello for basic SCRUM management as well as keeping track of resources and things that needed to be researched further.</li>
            <li>Used Draw.io to put together Use Case Diagrams, UML Diagrams, User Stories, and Wireframing.</li>
        </ul>
    </li>
    <li>
        Project Outline
        <ul>
            <li>MVP - Web application where a user can login / register, use Markdown make documents (with code snippets) and create / manage a ToDo list.</li>
            <li>
                After logging into the system, the user will be able to use Markdown syntax to make documents as they see fit. This project initially is<br />
                geared towards notes / project management for a programmer / developer. As such, code blocks and syntax highlighting is important.
            </li>
            <li>
                In order to keep the user within the app and to facilitate task management, the user will be able to easily add and view ToDo tasks.<br />
                These tasks will also have an option for tagging for increased organization.
            </li>
            <li>
                Planned Technologies:
                <ul>
                    <li>ASP.NET for server side</li>
                    <li>SQL for database (unsure at the moment)</li>
                    <li>HTML / CSS / JavaScript for client side</li>
                    <li>
                        <em>
                            Will take advantage of available Markdown converters and syntax highlighting as the intention of this project is not to develope those<br />
                            from scratch but show the ability to incorporate previously developed technology.
                        </em>
                    </li>
                </ul>
            </li>
        </ul>
    </li>
    <li>
        Development Phase
        <ul>
            <li>
                With ASP.NET / C# being a new environment and language for this project, three to four days were spend purely working through tutorials and<br />
                reading through digital resources to get up to speed.
            </li>
            <li>
                With enough knowledge to be dangerous, I transitioned to getting a base app together to build from using these basics. As I continue to<br />
                enhance the app, more resources will be collected to answer the more specific questions that arise.
            </li>
            <li>Before working together the models and controllers, focus was turned to defining a preliminary database structure to achieve the desired result.</li>
            <li>
                ToDo Module:
                <ul>
                    <li>
                        Due to simplicity and similarity to available tutorials / guides, the ToDo portion was tackled first. Configuring the relational<br />
                        piece of the tables proved to difficult, with out-dated tutorials and inconsistent information. Once the ToDo items were tied to their user, some<br />
                        bonus features such as pagination, filtering, sorting were added.
                    </li>
                </ul>
            </li>
            <li>
                Notes Module:
                <ul>
                    <li>
                        Creating the Notes Module was largely an exercise in replicating the CRUD of ToDo and adding the Markdown Conversion functionality.<br />
                        Although the Markdown conversion works well, it took time to fully integrate and adjust overlapping CSS for an appropriate appearance.<br />
                        Another learned lesson on this portion was dealing with data validation. As the converter will allow HTML tags, the validation routine was catching<br />
                        the tags and reporting unsafe conditions (and potential of allowing hack-scripts). In this case, the tags are desired and after a lot of investigation,<br />
                        adding <code>[AllowHtml]</code> to the Document Model provided correct validation. Although there are methods to counter the validation through the controller,<br />
                        that could introduce security holes into the application.
                    </li>
                </ul>
            </li>
            <li>
                As I always focus on functionality programming, little has been done on the overall look of the page. Thankfully the default project with Visual<br />
                Studio uses Bootstrap and a minimal appearance that I can build from.
            </li>
            <li>
                JSFiddle Form:
                <ul>
                    <li>
                        Although not quite as ‘cool’ as an embedded sandbox, a form (opened through more toggle switches!) can be accessed allowing the user<br />
                        to enter HTML/CSS/JS and open a JSFiddle with the code ready. The idea is that a user could copy code from their notes and get a JSFiddle ready without<br />
                        switching between pages multiple times. The user can also place the link for the JSFiddle along the code block for later viewing / testing / editing.
                    </li>
                    <li>
                        A couple of pieces needed to be tackled for the form that were new. The first was having the form slide in with a z-index ‘above’ the page. Although<br />
                        the form could have been implemented like the ‘easy add’ ToDo, I didn’t want to push the containers farther down and require the user to scroll up/down<br />
                        to copy the code from their notes and paste them into the form.
                    </li>
                    <li>
                        The next piece was successfully posting the information to JSFiddle. The original attempt of using an AJAX call was unsuccessful (potentially a header<br />
                        issue? Needs further investigation) however, the documentation included an example that used the form post method which worked appropriately.
                    </li>
                </ul>
            </li>
            <li>
                With (theoretically) the last toggle added to the markdown header, focused switched to styling and responsive management. Although this application’s deployment<br />
                has been focused for desktop use, it could still be efficiently used on a tablet sized device. As such, the Bootstrap grid system was used to keep input boxes<br />
                and toggles from stacking up. Working with multiple CSS files has shown me that projects may require a stronger focus on consolidation.
            </li>
            <li>While working with CSS and JSFiddle, some time was spent creating a sample logo using GIMP.</li>
            <li>
                Modal Support:
                <ul>
                    <li>
                        With the success of implementing partials and testing the application during class, it was noticed that there were some annoying routing when creating and<br />
                        editing a note. With original routing, one would navigate to the 'Notes’, click ‘New Note’ which would bring the user to a create page housing the markdown<br />
                        containers. However, if the user would then ‘save’ the note, they would be redirected back to the note list view. Similar routing occured when editting the<br />
                        document. These redirects are annoying if the user just wanted to save their work. As such, a modal to display text boxes for the new note name and parent<br />
                        folder and then redirect the user to the edit view was implemented. Within the edit view, instead of redirecting to the list view, a ‘saved’ message is returned<br />
                        and the user is able to continue working on their note.
                    </li>
                    <li>A Html.BeginForm helper for deletion was also added as directing the user to a delete view seemed unnecessary.</li>
                </ul>
            </li>
        </ul>
    </li>
    <li>
        Final Thoughts
        <ul>
            <li>
                As this project was developed, it soon became an exercise in integrating and implementing snippets, widgets, etc that have been previously developed. Due to the<br />
                timeframe, this was certainly necessary, but it is also beneficial to learn to incorporate work that has been performed rather than always starting from scratch. As<br />
                a person that loves solving problems, this is of interest because problems become more interesting with more moving parts. However, it is hard to feel that one has<br />
                <em>done</em> much when <em>just</em> putting parts together. At that point, I remind myself that car manufacturers are combining the work of external suppliers to make that car.
            </li>
            <li>
                Learning and using ASP.NET (C#) for this project over the course of two weeks was a challenge, especially with the not always helpful resources (largely due to being<br />
                out of date). My previous familiarity with  VB / VB.NET was certainly a benefit regarding the learning curve.
            </li>
            <li>
                Things I would have done differently: Now that I better understand the built-in authentication and session management, I would structure the Models a little differently.<br />
                As they currently exist, the ‘MyUser’ model which was intended to store user preferences is unused and not needed. With a better understanding of using partials, I also<br />
                believe I could improve the efficiency and streamline navigation and routing better.
            </li>
        </ul>
    </li>
</ul>
<h3>Installation:</h3>
<p><strong>Install on your local system</strong></p>
<ul>
    <li>
        <em>Git</em> the files
        <ul>
            <li>Fork the repository and <code>git clone</code> to your local system</li>
        </ul>
    </li>
    <li>
        Setting up the Environment
        <ul>
            <li>This project was developed in VS 2015 (Community) using the LocalDB for local development.</li>
            <li>While developing this project, it was learned that LocalDB is not always installed with VS 2015. Be sure to install any database updates!</li>
        </ul>
    </li>
    <li>
        Open the Solution file in VS
        <ul>
            <li>Build the solution and make sure all the dependencies are loaded properly</li>
        </ul>
    </li>
    <li>
        Check it out
        <ul>
            <li>Debug &gt; Start without Debugging and VS will open in your default browser. As the database will be created, it may take a few seconds to load up.</li>
        </ul>
    </li>
</ul>
<h3>Unsolved Problems:</h3>
<ul>
    <li>
        <strong>Embedded Code Sandbox</strong> - During the planning and design stage, a user story was connected to the ability to run<br />
        / test code while within the application. As there are a number of these sandboxes on the web, it was thought that<br />
        one should allow for embedding (and still allow editing / testing). In terms of a free source that could be integrated<br />
        within the timeline, nothing was found to fit the need. As such, the ability to put code from notes into a form to post<br />
        to JSFiddle was added. This is not the best solution, but may prove to be handy.
    </li>
    <li>
        Connected to the above, was unable to make a standard AJAX call to post the code to JSFiddle, may require additional<br />
        specifiers. However, an <a href="http://jsfiddle.net/zalun/sthmj/embedded/result/">example</a> was found using a form post to send<br />
        the information. This method works just as well.
    </li>
    <li>Would like to replace the ‘confirm’ alerts with something prettier than the browser defaults.</li>
</ul>
<h3>Change Log:</h3>
<ul>
    <li>
        28JAN2016
        <ul>
            <li>Added a modal to manage note creation / editing more smoothly</li>
            <li>Html.BeginForm helper used for deletion instead of redirecting to a ‘delete’ view</li>
            <li>‘Details’ route/view is not currently being used, it currently is unnecessary</li>
            <li>Code cleaning, commenting</li>
            <li>Readme updates</li>
        </ul>
    </li>
    <li>
        26JAN2016
        <ul>
            <li>CRUD funtionality has been working successfully</li>
            <li>Added toggle button to post code to JSFiddle (to test/run)</li>
            <li>Improved responsive design, specifically the toggle buttons as the screen width decreases.</li>
        </ul>
    </li>
    <li>
        24JAN2016
        <ul>
            <li>Updated ToDo module - added ability to filter, search, and display with multiple pages</li>
            <li>Added Notes module - able to CRUD notes, markdown conversion is functional, filter, search, pagination</li>
        </ul>
    </li>
    <li>
        23JAN2016
        <ul>
            <li>Added TODO Model/Controller/CRUD</li>
            <li>Time spent learning how to update database on ‘checkbox’ click rather than a submit button</li>
        </ul>
    </li>
    <li>
        21JAN2016
        <ul>
            <li>Added initial ASP.NET (C#) base code</li>
            <li>Readme updates (added Azure link)</li>
        </ul>
    </li>
    <li>
        17JAN2016
        <ul>
            <li>Readme updates (links, typos)</li>
            <li>Updated planning images (need a better name for that collection)</li>
        </ul>
    </li>
    <li>
        16JAN2016
        <ul>
            <li>Repository Created</li>
            <li>Added Links (Draw.io planning, Trello board) to README</li>
        </ul>
    </li>
</ul>